#An exampmle ngen-calibration configuration file
general:
  # Optional value to seed the random generators, useful for reproducing results
  # Defaults to None, which will not use a seed
  #random_seed: 42
  # Optional custom name for this run, can be used to generate unique output files
  # Defaults to `ngen-calibration`
  #name: None
  # Strategy configuration
  strategy: 
      # Type of strategey, currently supported is estimation
      type: estimation
      #defaults to dds (currently, the only supported algorithm)
      algorithm: "dds"
    #in theory, could do a senstivity strategy like this
    #sensitivity:
    #  objective: null

  # Attempt to restart a previous calibration.
  # Will look for log and parameter information in the `workdir` to restart
  # If the required restart information cannot be found, will start back from the 0 iteration
  # Defaults to false
  #restart: false

  # working directory for the calibration runs
  # note that all relative paths in this configuration file
  # as well as any relative paths in any model input files
  # will be relative to this working directory
  # defaults to ./
  #workdir: ./

  # logging locations
  # location to output stdout/stderr from model runs
  # defaults to None, which sends all output to /dev/null
  log_file: "test_log"
  # Name of the best parameter log file, defaults to `name`_best_params.txt
  #parameter_log_file: null
  # Name of the objective function log file, defaults to `name`_objective.txt
  #objective_log_file: null

  #iteration control
  # In general, the start iteration should probably always be 0
  # if `restart: true`, this is overridden by the detected existing iterations saved
  # otherwise, this can have some odd consequences, and will likely be removed from the
  # configuration support in the near future
  start_iteration: 0
  # The total number of search iterations to run
  # Note that if using `restart: true`, you shouldn't change the number of total iterations
  # though it may be tempting to use this to extend a previous run, some algorithms are sentstive
  # to the total number of iterations, and changing it unexpectedly across restarts may lead
  # to undesirable results
  iterations: 100

#Describe the model parameters you want to use, valid for independent and uniform
#ngen strategies
cfe_params: &cfe_params
  - 
      name: maxsmc
      min: 0.2
      max: 1.0
      init: 0.439
  - 
      name: satdk
      min: 0.0
      max: 0.000726
      init: 3.38e-06
  - 
      name: slope
      min: 0.0
      max: 1.0
      init: 0.01
#   - 
#       name: bb
#       min: 0.0
#       max: 21.9
#       init: 4.05
  - 
      name: multiplier
      min: 10.7
      max: 9997.3
      init: 100.0
  - 
      name: expon
      min: 1.0
      max: 8.0
      init: 6.0

ngen_objective: &ngen_objective
  # choices are "kling_gupta", "nnse", "custom", "single_peak", "volume"
  #objective: nnse
  # one can also provide a module path to any function that takes
  # obs, sim array-like arguments and produces a single value float
  # for example, nnse above could be called this way
  #objective: "ngen_cal.objectives.normalized_nash_sutcliffe"
  # Can choose to minimize the objective function or maximixe it
  # choices are 'min', 'max'.
  # An an explicit floating point value can be supplied instead, and the
  # optmization will attempt to converge on that value
  # Default: min
  #target: 0.0

#Model specifc configuration
model:
    # Which model to execute for the search optimization
    # Currently only support `ngen` and `none` (for testing purposes)
    type: ngen
    # A binary in $PATH or a qualified path to the binary to run
    binary: "ngen"
    # If running ngen in parallel, provide the number of requested parallel processes
    # The binary will get prepended with mpirun -n `parallel` automatically
    # Must be >= 2
    #parallel: 2
    # If a parallel run is requested, ngen requires a static partitions.json input file
    # this is the path to that file
    #partitions: <path>
    # By default, ngen args will be `catchments`` "all" `nexus`` "all" `configuration`
    # and if running in parallel    `catchments`` "all" `nexus`` "all" `configuration` `partitions`
    # If you provide a custom arg string here, these are passed directly to the binary
    # and no adjustments are made
    #args: null
    # Required path to ngen realization config (with calibration info included)
    realization: ../cfe-cal-2/realization_config.json
    # Required path to catchment hydrofabirc file
    catchments: ../cfe-cal-2/hydrofabric/catchment_data.geojson
    # Required path to nexus hydrofabric file
    nexus: ../cfe-cal-2/hydrofabric/nexus_data.geojson
    # Required path to hydrofabric crosswalk file
    crosswalk: ../cfe-cal-2/hydrofabric/crosswalk.json
    #ngen calibration strategies include
    #uniform: Each catchment shares the same parameter space, evaluates at one observable nexus
    #independet: Each catchment upstream of observable nexus gets its own permuated parameter space, evalutates at one observable nexus 
    #explicit: only calibrates basins in the realization_config with a "calibration" definition and an observable nexus
    strategy: independent
    params: 
        CFE: *cfe_params
    
    eval_params:
      # This is the range of the hydrograph dates to run the objective function over
      # To evaluate the entire period, you can comment these lines out
      #evaluation_start: '2015-12-15 12:00:00'
      #evaluation_stop: '2015-12-30 23:00:00'
      objective: *ngen_objective